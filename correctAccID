#!/usr/bin/perl -w


open (IN, $ARGV[0]) or die "Impossible to open file $ARGV[0].\n";
my @file=<IN>;
close(IN);
my @tab;
foreach my $i (0..$#file){
    my @s=split(/[\:\.]+/, $file[$i]);
    next if (scalar @s<3);
    $tab[$i]=\@s;
#    print($tab[$i]->[1], "\n");
}

my @list= sort{$a->[0] cmp $b->[0] || $a->[1] <=> $b->[1]} @tab;
my $ident=0;
my @cur_i;
for my $line (@list){
    my @tbl=@{$line};
    if(intersectTable($line, \@cur_i)){push @cur_i, $line}else{
	$ident++;
	foreach my $l (@cur_i){
#	    print ("\t");
	    print "$ident\n";
	}
	@cur_i=();
	push(@cur_i, $line);
    }
}
foreach my $l (@cur_i){
#    print ("\t");
    print "$ident\n";
}



sub intersectTable{
    my ($t1, $t2)=@_;
    my @ta=@{$t1};
    my @tb=@{$t2};
#    print scalar(@tb), " elements in table when considering line $ta[0]:$ta[1]\n";
    return 1 if (scalar(@tb) == 0);
    # ta contains a line, tb contains a table of lines
    foreach my $line(@tb){
	return 1 if (intersectLine($ta[0], $ta[1], $ta[2], $line->[0], $line->[1], $line->[2]));
    }
    return 0;
    
}

sub intersectLine{
    my ($chr1, $start1, $end1, $chr2, $start2, $end2)=@_;
    my @intervals=sort {$a <=> $b} ($start1, $end1, $start2, $end2);
    return 1 if($chr1 eq $chr2 && (($intervals[0]==$start1 && $intervals[1]==$start2) || ($intervals[0]==$start2 && $intervals[1]==$start1)) );
    return 0;

}
